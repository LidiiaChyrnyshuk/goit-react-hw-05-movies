{"version":3,"file":"static/js/583.43150878.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/SearchForm/SeachForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const StyledLink = styled(Link)`\n  display: block;\n  padding: 8px;\n  font-size: 16px;\n  text-decoration: none;\n  border-radius: 4px;\n  сolor: black;\n  box-shadow: 0 0 8px rgba(100, 234, 234, 0.451);\n  transition: 0.2s color cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #afe5e5;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { StyledLink, List } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <StyledLink to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title ? movie.title : 'N/A'}\n          </StyledLink>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const SearchFormStyled = styled.form`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  justify-content: center;\n  width: 350px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 30px;\n`;\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  font-size: 20px;\n  border-radius: 4px;\n  border-color: aqua;\n  padding: 8px;\n  background-color: transparent;\n  color: inherit;\n  outline: none;\n\n  &::placeholder {\n    font-size: 16px;\n  }\n`;\n\nexport const BtnSearch = styled.button`\n  display: inline-block;\n  width: 80px;\n  height: 45px;\n  font-size: 16px;\n  border: 0;\n  padding: 5px;\n  border-radius: 4px;\n  cursor: pointer;\n  background-color: aqua;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  SearchFormStyled,\n  SearchFormInput,\n  BtnSearch,\n} from './SeachForm.styled';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!value) {\n      alert('Enter new name');\n      return;\n    }\n    onSubmit(value);\n    setValue('');\n  };\n\n  return (\n    <SearchFormStyled onSubmit={handleSubmit}>\n      <label>\n        <SearchFormInput\n          onChange={handleChange}\n          value={value}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n      </label>\n      <BtnSearch type=\"submit\">Seach</BtnSearch>\n    </SearchFormStyled>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import Loader from 'components/Loader/Loader';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesByTitle } from 'services/moviesAPI';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoadign] = useState(false);\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (!query) {\n      return;\n    }\n    getMoviesByTitle(query)\n      .then(setMovies)\n      .finally(() => {\n        setIsLoadign(false);\n      });\n  }, [searchParams]);\n\n  const onSubmit = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <section>\n      <div>\n        <SearchForm onSubmit={onSubmit} />\n        {movies && <MoviesList movies={movies} />}\n        {/* {movies?.length === 0 && <p>Sorry, there is no movies your request.</p>} */}\n        {isLoading && <Loader />}\n      </div>\n    </section>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst seachParams = new URLSearchParams({\n  method: 'GET',\n  api_key: '2bd24135f91a853c6b382cb0cbb4f46b',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getTrendingMoviesDay = async () => {\n  const path = '/trending/all/day';\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data.results;\n};\n\nexport const getMoviesByTitle = async query => {\n  const path = '/search/movie';\n  const { data } = await axios.get(`${path}?${seachParams}&query=${query}`);\n  return data.results;\n};\n\nexport const getMovieDetailsById = async movieId => {\n  const path = `/movie/${movieId}`;\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data;\n};\n\nexport const getMovieCreditsById = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data.cast;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data.results;\n};\n"],"names":["List","styled","StyledLink","Link","movies","location","useLocation","map","movie","to","id","state","from","title","SearchFormStyled","SearchFormInput","BtnSearch","onSubmit","useState","value","setValue","event","preventDefault","alert","onChange","target","type","autoComplete","autoFocus","placeholder","setMovies","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoadign","useEffect","query","get","getMoviesByTitle","then","finally","MoviesList","Loader","axios","seachParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getTrendingMoviesDay","data","results","getMovieDetailsById","movieId","path","getMovieCreditsById","cast","getMovieReviewsById"],"sourceRoot":""}