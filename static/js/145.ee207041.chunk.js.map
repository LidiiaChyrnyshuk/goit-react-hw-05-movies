{"version":3,"file":"static/js/145.ee207041.chunk.js","mappings":"wKAiBA,IAfmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,UACE,uBAAIG,EAAMK,MAAQL,EAAMK,MAAQ,WAF3BL,EAAME,GADA,KAStB,C,yHCqBD,EAlCmB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACpB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAgBA,OACE,kBAAMH,SAXa,SAAAI,GACnBA,EAAMC,iBACDH,GAILF,EAASE,GACTC,EAAS,KAJPG,MAAM,iBAKT,EAGC,WACE,4BACE,kBACEC,SAlBa,SAAAH,GACnBD,EAASC,EAAMI,OAAON,MACvB,EAiBOA,MAAOA,EACPO,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,qBAGhB,mBAAQH,KAAK,aAGlB,E,mBCOD,EAjCe,WACb,OAA4BR,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeuB,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCf,EAAAA,EAAAA,WAAS,GAA3C,eAAOgB,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQL,EAAaM,IAAI,SAC1BD,IAGLE,EAAAA,EAAAA,IAAiBF,GACdG,KAAKV,GACLW,SAAQ,WACPN,GAAa,EACd,GACJ,GAAE,CAACH,IAMJ,OACE,8BACE,4BACE,SAAC,EAAD,CAAYf,SAPD,SAAAoB,GACfJ,EAAgB,CAAEI,MAAAA,GACnB,IAMM9B,IAAU,SAACmC,EAAA,EAAD,CAAYnC,OAAQA,IACX,KAAb,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQoC,UAAgB,uBAAG,4CAC3BT,IAAa,SAACU,EAAA,EAAD,QAIrB,C,kJCrCDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAc,IAAIC,gBAAgB,CACtCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAICC,EAAoB,mCAAG,4FACrB,oBADqB,SAEXT,EAAAA,EAAAA,IAAA,UADV,oBACU,YAAqBC,IAFV,uBAE1BS,EAF0B,EAE1BA,KAF0B,kBAG3BA,EAAKC,SAHsB,2CAAH,qDAMpBjB,EAAgB,mCAAG,WAAMF,GAAN,+EACjB,gBADiB,SAEPQ,EAAAA,EAAAA,IAAA,UADV,gBACU,YAAqBC,EAArB,kBAA0CT,IAFnC,uBAEtBkB,EAFsB,EAEtBA,KAFsB,kBAGvBA,EAAKC,SAHkB,2CAAH,sDAMhBC,EAAmB,mCAAG,WAAMC,GAAN,kFAC3BC,EAD2B,iBACVD,GADU,SAEVb,EAAAA,EAAAA,IAAA,UAAac,EAAb,YAAqBb,IAFX,uBAEzBS,EAFyB,EAEzBA,KAFyB,kBAG1BA,GAH0B,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/moviesAPI.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            <p>{movie.title ? movie.title : 'N/A'}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n","import { useState } from 'react';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!value) {\n      alert('Enter new name');\n      return;\n    }\n    onSubmit(value);\n    setValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <input\n          onChange={handleChange}\n          value={value}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n      </label>\n      <button type=\"submit\"></button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import Loader from 'components/Loader/Loader';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesByTitle } from 'services/moviesAPI';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoadign] = useState(false);\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (!query) {\n      return;\n    }\n    getMoviesByTitle(query)\n      .then(setMovies)\n      .finally(() => {\n        setIsLoadign(false);\n      });\n  }, [searchParams]);\n\n  const onSubmit = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <section>\n      <div>\n        <SearchForm onSubmit={onSubmit} />\n        {movies && <MoviesList movies={movies} />}\n        {movies?.length === 0 && <p>Sorry, there is no movies your request.</p>}\n        {isLoading && <Loader />}\n      </div>\n    </section>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst seachParams = new URLSearchParams({\n  method: 'GET',\n  api_key: '2bd24135f91a853c6b382cb0cbb4f46b',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getTrendingMoviesDay = async () => {\n  const path = '/trending/all/day';\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data.results;\n};\n\nexport const getMoviesByTitle = async query => {\n  const path = '/search/movie';\n  const { data } = await axios.get(`${path}?${seachParams}&query=${query}`);\n  return data.results;\n};\n\nexport const getMovieDetailsById = async movieId => {\n  const path = `/movie/${movieId}`;\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data;\n};\n\nexport const getMovieCreditsById = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data.cast;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data.results;\n};\n"],"names":["movies","location","useLocation","map","movie","to","id","state","from","title","onSubmit","useState","value","setValue","event","preventDefault","alert","onChange","target","type","autoComplete","autoFocus","placeholder","setMovies","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoadign","useEffect","query","get","getMoviesByTitle","then","finally","MoviesList","length","Loader","axios","seachParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getTrendingMoviesDay","data","results","getMovieDetailsById","movieId","path"],"sourceRoot":""}