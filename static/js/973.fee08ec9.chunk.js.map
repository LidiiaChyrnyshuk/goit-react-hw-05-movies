{"version":3,"file":"static/js/973.fee08ec9.chunk.js","mappings":"uNAEaA,E,QAAcC,EAAAA,GAAH,mF,SCwBxB,EAvBoB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,SAACF,EAAD,UACGE,EAAQC,KAAI,SAAAC,GAAI,OACf,2BACE,0BAAI,WAASA,EAAKC,WAClB,uBAAID,EAAKE,YAFFF,EAAKG,GADC,KAQtB,E,6BCcD,EArBgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAOR,OALAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IACbI,EAAAA,EAAAA,IAAoBH,GAASI,KAAKP,GAAYQ,QAAQN,GAAa,GACpE,GAAE,CAACC,KAGF,2BACGF,IAAa,SAACQ,EAAA,EAAD,IACO,KAAb,OAAPhB,QAAO,IAAPA,OAAA,EAAAA,EAASiB,UACR,uBAAG,8CAEJjB,IAAW,SAAC,EAAD,CAAaA,QAASA,MAGvC,C,kMCxBDkB,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAc,IAAIC,gBAAgB,CACtCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAICC,EAAoB,mCAAG,4FACrB,oBADqB,SAEXT,EAAAA,EAAAA,IAAA,UADV,oBACU,YAAqBC,IAFV,uBAE1BS,EAF0B,EAE1BA,KAF0B,kBAG3BA,EAAKC,SAHsB,2CAAH,qDAMpBC,EAAgB,mCAAG,WAAMC,GAAN,+EACjB,gBADiB,SAEPb,EAAAA,EAAAA,IAAA,UADV,gBACU,YAAqBC,EAArB,kBAA0CY,IAFnC,uBAEtBH,EAFsB,EAEtBA,KAFsB,kBAGvBA,EAAKC,SAHkB,2CAAH,sDAMhBG,EAAmB,mCAAG,WAAMtB,GAAN,kFAC3BuB,EAD2B,iBACVvB,GADU,SAEVQ,EAAAA,EAAAA,IAAA,UAAae,EAAb,YAAqBd,IAFX,uBAEzBS,EAFyB,EAEzBA,KAFyB,kBAG1BA,GAH0B,2CAAH,sDAMnBM,EAAmB,mCAAG,WAAMxB,GAAN,kFAC3BuB,EAD2B,iBACVvB,EADU,qBAEVQ,EAAAA,EAAAA,IAAA,UAAae,EAAb,YAAqBd,IAFX,uBAEzBS,EAFyB,EAEzBA,KAFyB,kBAG1BA,EAAKO,MAHqB,2CAAH,sDAMnBtB,EAAmB,mCAAG,WAAMH,GAAN,kFAC3BuB,EAD2B,iBACVvB,EADU,qBAEVQ,EAAAA,EAAAA,IAAA,UAAae,EAAb,YAAqBd,IAFX,uBAEzBS,EAFyB,EAEzBA,KAFyB,kBAG1BA,EAAKC,SAHqB,2CAAH,qD","sources":["components/ReviewsList/ReviewsList.styled.jsx","components/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewsInfo = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { ReviewsInfo } from './ReviewsList.styled';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <ReviewsInfo>\n      {reviews.map(item => (\n        <li key={item.id}>\n          <h3>Author: {item.author}</h3>\n          <p>{item.content}</p>\n        </li>\n      ))}\n    </ReviewsInfo>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default ReviewsList;\n","import Loader from 'components/Loader/Loader';\nimport ReviewsList from 'components/ReviewsList/ReviewsList';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviewsById } from 'services/moviesAPI';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieReviewsById(movieId).then(setReviews).finally(setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {reviews?.length === 0 && (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n      {reviews && <ReviewsList reviews={reviews} />}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst seachParams = new URLSearchParams({\n  method: 'GET',\n  api_key: '2bd24135f91a853c6b382cb0cbb4f46b',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const getTrendingMoviesDay = async () => {\n  const path = '/trending/all/day';\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data.results;\n};\n\nexport const getMoviesByTitle = async query => {\n  const path = '/search/movie';\n  const { data } = await axios.get(`${path}?${seachParams}&query=${query}`);\n  return data.results;\n};\n\nexport const getMovieDetailsById = async movieId => {\n  const path = `/movie/${movieId}`;\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data;\n};\n\nexport const getMovieCreditsById = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data.cast;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n  const { data } = await axios.get(`${path}?${seachParams}`);\n  return data.results;\n};\n"],"names":["ReviewsInfo","styled","reviews","map","item","author","content","id","useState","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieReviewsById","then","finally","Loader","length","axios","seachParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getTrendingMoviesDay","data","results","getMoviesByTitle","query","getMovieDetailsById","path","getMovieCreditsById","cast"],"sourceRoot":""}